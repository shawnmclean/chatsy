// Generated by CoffeeScript 1.3.1
(function() {
  var Manager, authService, exports;

  authService = require('./services/authorizeService').AuthorizeService;

  Manager = (function() {

    Manager.name = 'Manager';

    Manager.prototype.users = [];

    Manager.prototype.rooms = [];

    function Manager(io, options) {
      var self;
      this.io = io;
      this.options = options;
      this.authService = this.options.AuthorizeService || authService;
      io = this.io;
      self = this;
      io.configure(function() {
        return io.of("/chat").authorization(function(handshakeData, callback) {
          return self.authService.canJoinServer(handshakeData, callback);
        }).on("connection", function(socket) {
          if (socket.handshake.user == null) {
            throw "user object was not set on handshake during canJoinServer auth call";
          }
          return socket.on('joinRoom', function(data) {
            return self.joinRoom(data, this);
          });
        });
      });
    }

    Manager.prototype.joinRoom = function(data, socket) {
      var self;
      self = this;
      return this.authService.canJoinRoom(socket.handshake, data.roomId, function(canJoin) {
        var room;
        if (canJoin) {
          room = self.rooms.filter(function(el) {
            return el.roomId === data.roomId;
          })[0];
          if (room == null) {
            return self.authService.getRoom(data.roomId, function(room) {
              room.users.push(socket.handshake.user);
              self.rooms.push(room);
              return socket.emit("roomJoined", {
                room: room
              });
            });
          } else {
            room.users.push(socket.handshake.user);
            return socket.emit("roomJoined", {
              room: room
            });
          }
        }
      });
    };

    return Manager;

  })();

  exports = module.exports = Manager;

}).call(this);
